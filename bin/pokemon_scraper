#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import logging
import csv
from pokemon_irc.models import orm
from sqlalchemy.orm import sessionmaker
from pokemon_irc.web import poke_get_type_damage, poke_get
from pokemon_irc.models.pokedb_datatypes import move, entry, ability, types, move_level
logging.basicConfig(level=logging.DEBUG)


Session = sessionmaker(bind=orm.engine)
session = Session()



# derp?
def orm_wrapper(func):
    def inner(*args):
        derp = {}
        func(*args, d=derp)
        session.commit()
        return derp

    return inner


@orm_wrapper
def type_to_db(types, d):
    for t in types:
        logging.debug("adding type: %s" % t)
        o = orm.Type(name=t)
        d[t] = o
        session.add(o)


@orm_wrapper
def category_to_db(categories, d):
    for c in categories:
        logging.debug("adding category: %s" % c)
        o = orm.Category(name=c)
        d[c] = o
        session.add(o)


def damagetype_to_db(typedict, types=types):
    type_orm = type_to_db(types)

    for t1, t2 in ((t1, t2) for t1 in typedict for t2 in typedict[t1]):
        a, b = type_orm[t1], type_orm[t2]
        dmg = typedict[t1][t2]

        if not dmg:
            continue

        logging.debug("adding damage relation: %s -> %s (%s)" % (a.name, b.name, dmg))
        ot = orm.TypesRelation(attack=a.id, defence=b.id, dmg_mult=dmg)
        session.add(ot)

    session.commit()


@orm_wrapper
def effects_to_db(effects, d):
    for e in effects:
        logging.debug("adding effect: %s" % e)
        o = orm.Effect(description=e)
        d[e] = o
        session.add(o)


@orm_wrapper
def moves_to_db(moves, d):
    moves = [x for x in moves]
    effects = set(x.effect for x in moves)
    category_orm = category_to_db(set(x.category for x in moves))
    effect_orm = effects_to_db(effects)

    type_id = {x.name: x.id for x in session.query(orm.Type).all()}
    if not type_id:
        logging.error("no types, probably the scraping order is borked")
        raise("jp2gmd")

    for m in moves:
        logging.debug("adding move: %s" % m.name)
        n = m.name
        c = m.category
        t = m.type.lower()
        e = m.effect

        t = orm.Move(
            type=type_id[t],
            name=n,
            category=category_orm[c].id,
            power=m.power,
            accuracy=m.accuracy,
            pp=m.pp,
            effect_id=effect_orm[e].id,
            effect_prob=m.effect_prob
        )
        session.add(t)


@orm_wrapper
def pokemons_to_db(entries, d):

    type_id = {x.name: x.id for x in session.query(orm.Type).all()}
            
    added = set()
    for e in entries:
        logging.debug("adding pokemon: %s" % e.name)
        if e.name in added: continue
        added.add(e.name)

        et = orm.Pokemon(
            name=e.name,
            hp=e.hp,
            attack=e.attack,
            defence=e.defence,
            special_attack=e.special_attack,
            special_defence=e.special_defence,
            speed=e.speed,
        )
        session.add(et)

        for t in e.types:
            tt = orm.PokemonType(pokemon_id=e.id, type_id=type_id[t.lower()])
            session.add(tt)


@orm_wrapper
def abilities_to_db(abilities, d):
    pass # TODO: not implemented so much



@orm_wrapper
def move_trees_to_db(move_levels, d):
    pass
    #for e in move_levels:
        #moves = poke_get(move_levels, name=pokemon.name)
        #print(pokemon.name, list(moves))


def urlify(name):
    m = str.maketrans(' ', '-', '.\'')
    name = name.lower().translate(m)
    name = bytes(name, encoding='latin1').decode('utf-8')   # cancer
    name = name.replace('♀', '-f')
    name = name.replace('♂', '-m')
    return name


def get_trees(datatype):
    for pokemon in session.query(orm.Pokemon).filter(orm.Pokemon.moves_levels == None).all():
        moves = poke_get(datatype, name=urlify(pokemon.name.lower()))

        for m in moves:
            print(m.name)
            move = session.query(orm.Move).filter_by(name=m.name).first()
            if not move: raise("jp2gmd")

            session.add(orm.PokemonMoveLevel(
                move_id=move.id,
                pokemon_id=pokemon.id,
                level=m.level,
            ))
        session.commit()

datatypes = [
    ("types", types, poke_get_type_damage, damagetype_to_db),
    ("moves", move, moves_to_db),
    ("pokemons", entry, pokemons_to_db),
    ("abilities", ability, abilities_to_db),
    ("moves trees", move_level, get_trees, move_trees_to_db),
]


def main():
    log_line = "downloading %s..."

    for x in datatypes:

        if len(x) == 3:
            name, datatype, orm_func = x
            logging.info(log_line % name)
            orm_func(poke_get(datatype))

        elif len(x) == 4:
            name, datatype, func, orm_func = x
            logging.info(log_line % name)
            orm_func(func(datatype))

        else:
            raise("jp2gmd")

if __name__ == '__main__':
    main()
