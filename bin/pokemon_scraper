#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import logging
from pokemon_irc.models import orm
from pokemon_irc.models.orm import session
from sqlalchemy.orm import sessionmaker
from pokemon_irc.web import poke_get_type_damage, poke_get
import pokemon_irc.models.pokedb_datatypes as pk
logging.basicConfig(level=logging.DEBUG)


models = {}

def type_relations():
    types = models['types']

    relations = {(t.attack.name, t.defence.name): t.dmg_mult
        for t in session.query(orm.TypesRelation).all()}

    typedict = poke_get_type_damage(pk.types)

    for t1, t2 in ((t1, t2) for t1 in typedict for t2 in typedict[t1]):
        if (t1, t2) in relations:
            logging.debug('%s -> %s already in db' % (t1, t2))
            continue

        a, b = types[t1], types[t2]
        dmg = typedict[t1][t2]

        if not dmg:
            continue

        logging.debug("adding damage relation: %s -> %s (%s)" % (a.name, b.name, dmg))
        ot = orm.TypesRelation(attack=a, defence=b, dmg_mult=dmg)
        relations[(t1, t2)] = ot
        session.add(ot)
    models['relations'] = relations


def types():
    types = {t.name: t for t in session.query(orm.Type).all()}

    data = poke_get(pk.types)
    for t in pk.types:
        if t in types:
            logging.debug("already in db: %s" % t)
            continue

        logging.debug("adding type: %s" % t)
        o = orm.Type(name=t)
        types[t] = o
        session.add(o)

    models['types'] = types


def effects():
    effects = {e.description: e for e in session.query(orm.Effect).all()}

    for e in set(x.effect for x in models['pk_moves']):
        if e in effects:
            logging.debug("already in db: %s" % e)
            continue
        logging.debug("adding effect: %s" % e)
        o = orm.Effect(description=e)
        effects[e] = o
        session.add(o)

    models['effects'] = effects


def categories():
    categories = {c.name: c for c in session.query(orm.Category).all()}

    for c in set(x.category for x in models['pk_moves']):
        if c in categories:
            logging.debug("already in db: %s" % c)
            continue
        logging.debug("adding category: %s" % c)
        o = orm.Category(name=c)
        categories[c] = o
        session.add(o)
    models['categories'] = categories





def moves():
    models['pk_moves'] = [x for x in poke_get(pk.move)]
    effects()
    categories()

    moves = {m.name: m for m in session.query(orm.Move).all()}

    for m in poke_get(pk.move):

        if m.name in moves:
            logging.debug("already in db: %s" % m.name)
            continue
        logging.debug("adding move: %s" % m.name)
        o = orm.Move()

        for field in m._fields:
            setattr(o, field, getattr(m, field))

        o.effect = models['effects'][m.effect]
        o.type = models['types'][m.type.lower()]
        o.category = models['categories'][m.category]

        session.add(o)
        moves[m.name] = o

    models['moves'] = moves


def pokemons():
    pokemons = {x.name: x for x in session.query(orm.Pokemon).all()}

    for p in poke_get(pk.pokemon):
        if p.name in pokemons:
            logging.debug("already in db: %s" % p.name)
            continue
        logging.debug("adding pokemon: %s" % p.name)

        o = orm.Pokemon()

        for field in p._fields:
            if field == 'types':

                types = [models['types'][t.lower()] for t in getattr(p, field)]
                setattr(o, field, types)
                continue
            setattr(o, field, getattr(p, field))


        pokemons[p.name] = o
        session.add(o)

    models['pokemons'] = pokemons


def abilities():
    pass
    # TODO:
    #abilities = {x.name: x for x in session.query(orm.Ability).all()}


    #for a in poke_get(pk.ability):
        #if a.name in abilities
            #logging.debug("already in db: %s" % p.name)
            #continue
        #logging.debug("adding pokemon: %s" % p.name)


def urlify(name):
    m = str.maketrans(' ', '-', '.\'')
    name = name.lower().translate(m)
    name = name.replace('♀', '-f')
    name = name.replace('♂', '-m')
    return name

def levels():
    levels = {(x.pokemon.name, x.move.name): x
              for x in session.query(orm.PokemonMoveLevel).all()
    }
    pokemon_levels = set(x[0] for x in levels)

    for (pokemon_name, pokemon) in models['pokemons'].items():
        if pokemon_name in pokemon_levels:
            logging.debug("probably already in db: %s" % (pokemon_name))
            continue

        lower_name = urlify(pokemon_name.lower())
        moves = poke_get(pk.move_level, name=lower_name)
        for m in moves:
            if (pokemon_name, m.name) in levels:
                logging.debug("already in db: %s:%s" % (pokemon_name, m.name))
                continue
            logging.debug("adding movelevel: %s:%s" % (pokemon_name, m.name))

            o = orm.PokemonMoveLevel()
            o.pokemon = pokemon
            o.move = models['moves'][m.name]
            o.level = m.level

            session.add(o)
            levels[(pokemon_name, m.name)] = o


stuff = [
    types,
    type_relations,
    moves,
    pokemons,
    abilities,
    levels,
]


def main():
    log_line = "downloading %s..."

    for x in stuff:
        x()
        session.commit()

if __name__ == '__main__':
    main()
